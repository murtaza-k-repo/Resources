1) What will be the output of the following?

	(function(){
		 setTimeout(()=> console.log(1),2000);
		 console.log(2);
		 setTimeout(()=> console.log(3),0);
		 console.log(4);
	})();

	Options:
	
	a) 1 2 3 4
	b) 2 3 4 1
	c) 2 4 3 1
	d) 4 3 2 1
	
	Answer: (c)
	
2) How are objects compared when they are checked with the strict equality operator?

	options:
	
	(a) The contents of the objects are compared
	(b) Their references are compared
	(c) Both A and B
	(d)None of the above
	
	Answer: (b)
	
	
3) What will be the output of the following?

	(function(a){
	 return (function(){
	   console.log(a);
	   a = 6;
	 })()
	})(21);
	
	options:
	
	(a) 6
	(b) NaN
	(c) 21
	(d) None of the above
	
	Answer: (c)
	
	
4) Choose the correct statement in the context of uncontrolled components in ReactJS?

	options:
	
	(a) source of truth can be anything
	(b) source of truth is a component state
	(c) source of truth is DOM
	(d) none of the above
	
	Answer: (c)
	
5)  We can update the state in React.js by calling to setState() method. These calls are:

	options:
	
	(a) Synchronous in nature.
	(b) Asynchronous in nature.
	(c) Are asynchronous but can be made synchronous when required.
	(d) None of the above.
	
	Answer: (b)
	
6)  What's the value of output?
	const one = false || {} || null;
	const two = null || false || '';
	const three = [] || 0 || true;

	console.log(one, two, three);
	
	options:
	
	(a) false null []
	(b) null "" true
	(c) {} "" []
	(d) null null true
	
	Answers: (c)
	

7) What's the value of output?
	const myPromise = () => Promise.resolve('I have resolved!');

	function firstFunction() {
	  myPromise().then(res => console.log(res));
	  console.log('second');
	}

	async function secondFunction() {
	  console.log(await myPromise());
	  console.log('second');
	}

	firstFunction();
	secondFunction();
	
	options:
	
	(a) have resolved!, second and I have resolved!, second
	(b) second, I have resolved! and second, I have resolved!
	(c) I have resolved!, second and second, I have resolved!
	(d) second, I have resolved! and I have resolved!, second
	
	Answer: (d)
	

8) Which of the following is true about code splitting ?

	options:
	
	(a) React.memo
	(b) React.split
	(c) React.lazy
	(d) React.fallback
	
	Answer: (c)
	
	
9) Which of the following is NOT a rule for React Hooks?
	
	options: 
	
	(a) Hooks cannot be conditional 
	(b) Hooks can only be called inside React Function components
	(c) Hooks can only be called at the top level of a component
	(d) Hooks can be called in Class or Function components  
	
	Answer: (d)
	
10) Why should you avoid copying the values of props into a component's state?

	options:
	
	(a) Because you should never mutate state  
	(b) Because that would create two instances of the same state that could become out of sync 
	(c) Because you want to allow data to flow back up to the parent
	(d) Because prop values cannot be stored in state
	
	Answer: (b)

11)  Which of the following options will return 6?
	function sumValues(x, y, z) {
	  return x + y + z;
	}
	
	options:
	
	(a) sumValues([...1, 2, 3])
	(b) sumValues([...[1, 2, 3]])
	(c) sumValues(...[1, 2, 3])
	(d) sumValues([1, 2, 3])
	
	Answer: (c)
	
12) React separates the user interface into components. How are components combinded to create a user interface?
	
	options: 
	
	(a) With webpack 
	(b) With code splitting
	(c) By putting them in a folder structure
	(d) By nesting components
	
	Answer: (d)
	
	
13) What's the output?
	[[0, 1], [2, 3]].reduce(
	  (acc, cur) => {
	    return acc.concat(cur);
	  },
	  [1, 2],
	);
	
	options:
	
	(a) [0, 1, 2, 3, 1, 2]
	(b) [6, 1, 2]
	(c) [1, 2, 0, 1, 2, 3]
	(d) [1, 2, 6]
	
	Answer: (c)
	
14) What's the output?
	const person = { name: 'Lydia' };

	Object.defineProperty(person, 'age', { value: 21 });

	console.log(person);
	console.log(Object.keys(person));
	
	(a) { name: "Lydia", age: 21 }, ["name", "age"]
	(b) { name: "Lydia", age: 21 }, ["name"]
	(c) { name: "Lydia"}, ["name", "age"]
	(d) { name: "Lydia"}, ["age"]
	
	Answer: (b)
	
	
15) How can you optimze performance for a function component that always renders the same way?

	options:
	
	(a) Use the useMemo Hook. 
	(b) Use the useReducer Hook.
	(c) Use the shouldComponentUpdate lifecycle method.
	(d) Wrap it in the React.memo higher-order component.  
	
	Answer: (d)
